// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    Add16(a[0..14]=address, b[14..15]=true, b[0..13]=false, out[14]=isram); // -0x4000 in 2's complement
    Add16(a[0..14]=address, b[15]=true, b[14]=false, b[13]=true, b[1..12]=false, b[0]=true, out[14]=isscreenaddress); // -0x5FFF
    
    Not(in=isram, out=notisram);
    And(a=notisram, b=isscreenaddress, out=isscreen);
    And(a=isram, b=load, out=isramload);
    And(a=isscreen, b=load, out=isscreenload);
    
    RAM16K(in=in, load=isramload, address=address[0..13], out=ramout);
    Screen(in=in, load=isscreenload, address=address[0..12], out=screenout);
    Keyboard(out=keyboardout);
    
    Mux4Way16(a=keyboardout, b=screenout, c=ramout, d=false, sel[1]=isram, sel[0]=isscreen, out=out);
}