// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Not(in=instruction[15], out=ainstruction);
    Or(a=ainstruction, b=instruction[5], out=loadtoa);
    Mux16(a=instruction, b=ALUoutput, sel=instruction[15], out=ain);
    ARegister(in=ain, load=loadtoa, out[0..14]=addressM, out=aout);
    Mux16(a=aout, b=inM, sel=instruction[12], out=amout);
    
    And(a=instruction[15], b=instruction[4], out=loadtod); // only load to d on a c-instruction
    DRegister(in=ALUoutput, load=loadtod, out=dout);
    
    ALU(x=dout, y=amout, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=ALUoutput, zr=equal, ng=notgreater);
    Not(in=equal, out=notequal);
    Not(in=notgreater, out=greaterorequal);
    
    And(a=instruction[15], b=instruction[3], out=writeM);
    
    DMux8Way(in=true, sel[2]=instruction[2], sel[1]=instruction[1], sel[0]=instruction[0], b=jgtsel, c=jeqsel, d=jgesel, e=jltsel, f=jnesel, g=jlesel, h=jmp);
    And(a=greaterorequal, b=notequal, out=jgtreq);
    And(a=jgtsel, b=jgtreq, out=jgt);
    And(a=jeqsel, b=equal, out=jeq);
    And(a=jgesel, b=greaterorequal, out=jge);
    And(a=jltsel, b=notgreater, out=jlt);
    And(a=jnesel, b=notequal, out=jne);
    Or(a=notgreater, b=equal, out=jlereq);
    And(a=jlesel, b=jlereq, out=jle);
    Or8Way(in[0]=false, in[1]=jgt, in[2]=jeq, in[3]=jge, in[4]=jlt, in[5]=jne, in[6]=jle, in[7]=jmp, out=validjump);
    And(a=validjump, b=instruction[15], out=dojump); // only jump on a c-instruction
    PC(in=aout, load=dojump, inc=true, reset=reset, out[0..14]=pc);
}